import { nextTick } from 'vue';
import { mountExtended } from 'helpers/vue_test_utils_helper';
import SectionIdentifiers from 'ee/vulnerabilities/components/new_vulnerability/section_identifiers.vue';

describe('New vulnerability - Section Identifiers', () => {
  let wrapper;

  const createWrapper = () => {
    return mountExtended(SectionIdentifiers);
  };

  beforeEach(() => {
    wrapper = createWrapper();
  });

  afterEach(() => {
    wrapper.destroy();
  });

  const findIdentifierRows = () => wrapper.findAllByTestId('identifier-row');

  describe.each`
    labelText
    ${'Identifier code'}
    ${'Identifier URL'}
  `('for input $labelText', ({ labelText }) => {
    it(`displays the input with the correct label: "${labelText}"`, () => {
      expect(wrapper.findByLabelText(labelText).exists()).toBe(true);
    });

    it('emits change even when input changes', () => {
      wrapper.findByLabelText(labelText).trigger('change');
      expect(wrapper.emitted('change')[0][0]).toEqual({
        identifiers: [{ identifierCode: '', identifierUrl: '', id: 0 }],
      });
    });
  });

  it('adds and removes identifier rows', async () => {
    expect(findIdentifierRows()).toHaveLength(1);

    wrapper.findByTestId('add-identifier-row').trigger('click');
    await nextTick();

    expect(findIdentifierRows()).toHaveLength(2);

    wrapper.findByLabelText('Remove identifier row').trigger('click');
    await nextTick();

    expect(findIdentifierRows()).toHaveLength(1);
    expect(wrapper.findByLabelText('Remove identifier row').exists()).toBe(false);
  });
});
